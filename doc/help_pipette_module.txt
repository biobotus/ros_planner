Help on module deck.pipette_module in deck:

NAME
    deck.pipette_module

FILE
    /home/ubuntu/biobot_ros_jtk/src/ros_planner/scripts/deck/pipette_module.py

CLASSES
    deck.deck_module.DeckModule(__builtin__.object)
        PipetteModule

    class PipetteModule(deck.deck_module.DeckModule)
     |  PipetteModule class describes all function relevant to pipette's protocol, without
     |  consideration for the single or the multi-pipette.
     |
     |  Method resolution order:
     |      PipetteModule
     |      deck.deck_module.DeckModule
     |      __builtin__.object
     |
     |  Methods defined here:
     |
     |  __init__(self, m_type, coord)
     |      Initialise the PipetteModule class. It contains there current size [small, medium, large]
     |      and their type (single or multiple (pipette_m))
     |      It also contains most of the hardcoded value regarding the height of the tip and some
     |      specific offset necessary for a smooth movement into the trash and other specific labware.
     |
     |  actual_mod_pos(self, module_dic, coord)
     |
     |  aspirate(self, volume, speed)
     |      Aspirate required volume from the current pipette
     |      Input: volume (ul) to aspirate, speed
     |      Output: step_move : list of steps to perform the task.
     |
     |  dispense(self, volume, speed)
     |      dispence required volume from the current pipette
     |      Input: volume (ul) to aspirate, speed
     |      Output: step_move : list of steps to perform the task.
     |
     |  eject_tip(self, tip_size, module_dic)
     |      This function send a list of step in order to ject the tip. It goes over the trash
     |      get inside and go through the trash teeth before moving up thus ejecting the tip.
     |
     |      Input: tip_size, module_dic
     |      Output: list of steps for the required action
     |
     |
     |       TRASH TOP VIEW
     |              __________ (0,0,0) ==> dump_coord (top left corner)
     |            /|_________|       y <-----|
     |           / |         |             / |
     |          /  |         |           v   |
     |          |  |         |         z     V
     |          |  |/\/\/\/\/|               x
     |          |  |---------|
     |          | /         /
     |          |----------|
     |         The dump will always be positioned in this manner
     |             because of the 8-tips pipette.
     |
     |  get_tip(self, tip_size, module_dic)
     |      Verify the size of the tip to get and send a list of step to get them.
     |      For each pipette type, it goes over the well, get inside and secure the tip
     |      move up again.
     |      Input: tip_size, module_dic
     |      Output: list of step to get tip.
     |
     |  get_tip_size(self, volume)
     |      Function determining which pipette is needed for the protocol by comparing volumes needed.
     |      Input: volume
     |      Output: None
     |
     |  move_pos(self, coord, module_dic)
     |      Verify that the requested movement are within limits of the platform.
     |      Input: coord, module_dic
     |      Output: list of steps required to perform the task
     |
     |  multi_dispense(self, last, iteration, module_dic, volume, speed, trans_json)
     |
     |  parse_json(self, json_instruction, module_dic)
     |      This function go through the json files and make the call on the relevant function needed
     |      to process protocols required by the user.
     |      Input: json_instruction, module_dic
     |      Output: None
     |
     |  _parse_mix(self, trans_json, module_dic)
     |      A mix is an operation which go to a well and mix the content of it
     |      by aspiring and ejecting a percentage of the liquid inside the specified well
     |      There is 8 step to do so :
     |          * get the tip
     |          * go to the well position
     |          * get down
     |          * aspirate      \
     |                            >  loop
     |          * dispense      /
     |          * get up
     |          * go to the dump
     |          * eject tip
     |      :param trans_json: the json containing the information
     |      :param module_dict: the list of module involved in the protocol
     |      :return: a list of steps with their different parameters to complete
     |          the task
     |
     |  parse_mod_coord(self, dest_string, mod_dict)
     |
     |  _parse_multi_dispense(self, trans_json, module_dic)
     |      A multi dispense is an operation which go to a well divide the volume into other wells
     |      equally.
     |      There is 8 step to do so :
     |          * get the tip
     |          * go to the source well position
     |          * get down
     |          * aspirate
     |          * get up                        \
     |          * go to the destination well     \
     |          * get down                       /  loop
     |          * dispense                      /
     |          * get up
     |          * go to the dump
     |          * eject tip
     |      :param trans_json: the json containing the information
     |      :param module_dict: the list of module involved in the protocol
     |      :return: a list of steps with their different parameters to complete
     |          the task
     |
     |  _parse_serial_dilution(self, trans_json, module_dic)
     |      A transfer is an operation which transfer from one well to another a
     |      certain amount of liquid
     |      There is 16 and more steps to do so :
     |          * get the tip
     |          * go to the source well position
     |          * get down
     |          * aspirate
     |          * get up
     |
     |          * go to the destination well  \
     |          * get down                     \
     |          * dispense (90%)                > loop
     |          * aspirate (75%)               /
     |          * get up                      /
     |
     |          * go to the destination well
     |          * get down
     |          * dispense (100%)
     |          * get up
     |          * go to the dump
     |          * eject tip
     |      :param trans_json: the json containing the information
     |      :param module_dict: the list of module involved in the protocol
     |      :return: a list of steps with their different parameters to complete
     |          the task
     |
     |  _parse_transfer(self, trans_json, module_dic)
     |      A transfer is an operation which transfer from one well to another a
     |      certain amount of liquid
     |      There is 8 step to do so :
     |          * get the tip
     |          * go to the source well position
     |          * get down
     |          * aspirate
     |          * get up
     |          * go to the destination well
     |          * get down
     |          * dispense
     |          * get up
     |          * go to the dump
     |          * eject tip
     |      :param trans_json: the json containing the information
     |      :param module_dict: the list of module involved in the protocol
     |      :return: a list of steps with their different parameters to complete
     |          the task
     |
     |  serial_dilution(self, iteration, module_dic, volume, speed, trans_json, last_mix)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from deck.deck_module.DeckModule:
     |
     |  __str__(self)
     |      Return a string representing the module (the name)
     |
     |  get_mod_coordinate(self)
     |
     |  get_mod_diameter(self)
     |
     |  get_well_coordinate(self, letter, number)
     |      Return a well coordinate, acording to the global referential
     |      (robot top left corner)
     |
     |  set_mod_diameter(self, d)
     |
     |  set_well_layout(self, nb_line, nb_column, first_offset, offset)
     |      Set how the wells are repartited on the plate/module.
     |      @param nb_line the number of well lines
     |      @param nb_column the number of well column
     |      @param x_offset the distance between two columns in mm
     |      @param y_offset the distance between two lines in mm
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from deck.deck_module.DeckModule:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)


